# Name of your application. Used to uniquely configure containers.
service: openbudget

# Name of the container image.
image: rz1989/openbudget

# Deploy to these servers.
servers:
  web:
    hosts:
      - 176.222.53.185
    options:
      publish:
        - "3100:3000"  # Map host port 3100 to container port 3000

# Proxy disabled - using existing nginx on VPS
# Nginx will proxy openbudget.rectorspace.com to localhost:3100
# (No proxy section = Kamal won't install kamal-proxy)

# Credentials for your image host (Docker Hub).
registry:
  # Using Docker Hub (default)
  username: rz1989
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - DATABASE_URL
    - NEXT_PUBLIC_SOLANA_PROGRAM_ID
    - NEXT_PUBLIC_SOLANA_RPC_URL
    - NEXT_PUBLIC_SOLANA_NETWORK
    - NEXTAUTH_URL
    - NEXTAUTH_SECRET
    - GOOGLE_CLIENT_ID
    - GOOGLE_CLIENT_SECRET

# Use existing Docker network (created manually, shared with PostgreSQL)
network: kamal

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bash"
  logs: app logs --follow

# Use a different ssh user than root
ssh:
  user: openbudget
  # GitHub Actions will use SSH agent, no need to specify key path

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
